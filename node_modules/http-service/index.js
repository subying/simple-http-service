/*
	创建http服务
	by subying tearlight2008@gmail.com
*/

/*
依赖模块
 */
var http = require('http')
	,fs = require('fs')
	,url = require('url')
	,path = require('path')
	,getConType = require('./content-type')//自己定义  根据后缀转换Content-Type
;


var webHttp = {}
	,webService = {}
;

var ceateHttp = function(port,root,cb){
	webHttp = http.createServer(function (req, res) {
		var reqUrl=req.url; //获取请求的url

		//console.log(reqUrl);


		var pathName = url.parse(reqUrl).pathname //使用url解析模块获取url中的路径名
			,ext = path.extname(pathName) //获取url后缀
		;

		if (ext === "") {//如果路径没有扩展名
			pathName+="/"; //指定访问目录
		}

		if (pathName.charAt(pathName.length-1)=="/"){ //判断最后一个字符 如果是'/' 那么就表示访问目录
			pathName+="index.html"; //指定为默认网页
		}

		var filePath = path.join(root,pathName)//找出文件路径
			,stream = ''//字节流数据
		;

		//console.log(filePath);

		//返回数据 res操作

		//判断文件是否存在
		if(fs.existsSync(filePath)){//如果文件存在
			res.writeHead(200, {"Content-Type": getConType(ext) });

			stream = fs.createReadStream(filePath, {flags : "r", encoding : null});//只读模式 读取文件内容
			stream.on('error',function(){//如果读取错误 返回404
				res.writeHead(404, {"Content-Type": "text/html"});
				res.end("<h1>404 Read Error</h1>");
			});

			stream.pipe(res);//连接文件流和http返回流的管道,用于返回实际Web内容

		}else{//返回404错误
			res.writeHead(404, {"Content-Type": "text/html"});
			res.end("<h1>404 Not Found</h1>");
		}

	});

	webHttp.listen(port, '127.0.0.1');//监听

	cb();//执行回调方法

	return webHttp;
};

module.exports = ceateHttp;